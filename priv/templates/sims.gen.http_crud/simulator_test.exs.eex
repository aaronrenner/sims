defmodule <%= inspect @module %> do
  use ExUnit.Case, async: true

  alias <%= inspect @simulator.namespace %>

<%= if @simulator_helpers_module do %>
  setup [{<%= inspect(@simulator_helpers_module.module) %>, :configure_for_<%= @simulator.underscore_name %>_simulator}]

  setup do
    req = Req.new(base_url: <%= inspect(@swappable_config.namespace) %>.<%= @simulator.underscore_name %>_base_url(), retry: false)
    [req: req]
  end
<% else %>
  setup do
    sim = start_supervised!(<%= inspect @simulator.alias %>)
    req = build_req(sim)

    [<%= @simulator.underscore_name %>_simulator: sim, req: req]
  end
<% end %>

  test "simulator starts successfully", %{<%= @simulator.underscore_name %>_simulator: sim, req: req} do
    response = Req.get!(req, url: "/status")

    assert response.body == "Up!"
    assert response.status == 200
  end

  test "allows for closing and reopening a connection", %{<%= @simulator.underscore_name %>_simulator: sim, req: req} do
    <%= inspect @simulator.alias %>.down(sim)

    assert {:error, %Req.TransportError{reason: :econnrefused}} =
             Req.request(req, url: "/status")

    <%= inspect @simulator.alias %>.up(sim)

    assert Req.get!(req, url: "/status").status == 200
  end

  test "requires an API token", %{<%= @simulator.underscore_name %>_simulator: sim, req: req} do
    {:ok, account} = <%= inspect @simulator.alias %>.create_account(sim)
    assert Req.get!(req, url: "/<%= @model.plural %>").status == 401

    resp = req |> attach_account_auth(account) |> Req.get!(url: "/<%= @model.plural %>")

    assert resp.status == 200
    assert %{"<%= @model.plural %>" => []} = resp.body
  end

  describe "simulator business logic" do
    test "<%= @model.name %> crud", %{<%= @simulator.underscore_name %>_simulator: sim, req: req} do
      {:ok, account} = <%= inspect @simulator.alias %>.create_account(sim)
      req = attach_account_auth(req, account)

      assert resp =
               Req.post!(req,
                 url: "/<%= @model.plural %>",
                 json: %{"first_name" => "Joe", "last_name" => "Smith"}
               )

      assert resp.status == 201
      assert %{"id" => id, "first_name" => "Joe", "last_name" => "Smith"} = resp.body

      assert %{status: 200, body: body} = Req.get!(req, url: "/<%= @model.plural %>/#{id}")
      assert %{"id" => ^id, "first_name" => "Joe", "last_name" => "Smith"} = body

      assert %{status: 200, body: body} = Req.get!(req, url: "/<%= @model.plural %>")

      assert %{"<%= @model.plural %>" => [%{"id" => ^id, "first_name" => "Joe", "last_name" => "Smith"}]} = body

      assert %{status: 200, body: body} =
               Req.patch!(req, url: "/<%= @model.plural %>/#{id}", json: %{"first_name" => "Jim"})

      assert %{"id" => ^id, "first_name" => "Jim", "last_name" => "Smith"} = body

      assert %{status: 204} = Req.delete!(req, url: "/<%= @model.plural %>/#{id}")

      assert %{status: 404} = Req.get!(req, url: "/<%= @model.plural %>/#{id}")

      assert %{status: 404} =
               Req.patch!(req, url: "/<%= @model.plural %>/#{id}", json: %{"first_name" => "Jim"})

      assert %{status: 404} = Req.delete!(req, url: "/<%= @model.plural %>/#{id}")

      assert %{status: 200, body: %{"<%= @model.plural %>" => []}} = Req.get!(req, url: "/<%= @model.plural %>")
    end

    test "<%= @model.plural %> are returned in the order they are inserted", %{<%= @simulator.underscore_name %>_simulator: sim, req: req} do
      {:ok, account} = <%= inspect @simulator.alias %>.create_account(sim)
      req = attach_account_auth(req, account)

      <%= inspect @simulator.alias %>.create_<%= @model.name %>(sim, account.id, first_name: "<%= @model.name %> 1")
      <%= inspect @simulator.alias %>.create_<%= @model.name %>(sim, account.id, first_name: "<%= @model.name %> 2")
      <%= inspect @simulator.alias %>.create_<%= @model.name %>(sim, account.id, first_name: "<%= @model.name %> 3")

      assert %{status: 200, body: body} = Req.get!(req, url: "/<%= @model.plural %>")

      assert get_in(body, ["<%= @model.plural %>", Access.all(), "first_name"]) ==
               ["<%= @model.name %> 1", "<%= @model.name %> 2", "<%= @model.name %> 3"]
    end

    test "<%= @model.plural %> are separated by account", %{<%= @simulator.underscore_name %>_simulator: sim, req: req} do
      {:ok, account_1} = <%= inspect @simulator.alias %>.create_account(sim)
      {:ok, account_2} = <%= inspect @simulator.alias %>.create_account(sim)

      req_1 = attach_account_auth(req, account_1)
      req_2 = attach_account_auth(req, account_2)

      <%= inspect @simulator.alias %>.create_<%= @model.name %>(sim, account_1.id, first_name: "account 1")

      assert %{status: 200, body: %{"<%= @model.plural %>" => [%{"first_name" => "account 1"}]}} =
               Req.get!(req_1, url: "/<%= @model.plural %>")

      assert %{status: 200, body: %{"<%= @model.plural %>" => []}} = Req.get!(req_2, url: "/<%= @model.plural %>")
    end
  end

<%= if @simulator.options.response_stubs? do %>
  describe "triggering errors" do
    test "globally", %{<%= @simulator.underscore_name %>_simulator: sim, req: req} do
      <%= inspect @simulator.alias %>.trigger_internal_server_errors(sim, :all)

      assert Req.get!(req, url: "/<%= @model.plural %>").status == 500
      assert Req.get!(req, url: "/status").status == 500
      assert Req.get!(req, url: "/<%= @model.plural %>/abc123").status == 500

      <%= inspect @simulator.alias %>.clear_triggered_responses(sim)

      assert Req.get!(req, url: "/status").status == 200
      assert Req.get!(req, url: "/<%= @model.plural %>").status == 401
    end

    test "per endpoint", %{<%= @simulator.underscore_name %>_simulator: sim, req: req} do
      {:ok, account} = <%= inspect @simulator.alias %>.create_account(sim)
      req = attach_account_auth(req, account)

      <%= inspect @simulator.alias %>.trigger_internal_server_errors(sim, :create_<%= @model.name %>)

      assert %{status: 500} =
               Req.post!(req,
                 url: "/<%= @model.plural %>",
                 json: %{"first_name" => "Joe", "last_name" => "Smith"}
               )

      assert %{status: 200, body: %{"<%= @model.plural %>" => []}} = Req.get!(req, url: "/<%= @model.plural %>")

      <%= inspect @simulator.alias %>.trigger_invalid_responses(sim, :list_<%= @model.plural %>)

      assert %{status: 200, body: "Invalid"} = Req.get!(req, url: "/<%= @model.plural %>")
    end
  end
<% end %>

  defp build_req(sim) do
    Req.new(base_url: <%= inspect @simulator.alias %>.base_url(sim), retry: false)
  end

  defp attach_account_auth(req, account) do
    Req.Request.merge_options(req, auth: {:basic, "#{account.id}:#{account.token}"})
  end
end
