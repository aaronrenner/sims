defmodule <%= inspect @module %> do
  use ExUnit.Case, async: true

  alias <%= inspect @simulator.namespace %>

  setup do
    sim = start_supervised!(<%= inspect @simulator.alias %>)
    req = Req.new(base_url: <%= inspect @simulator.alias %>.base_url(sim), retry: false)

    [sim: sim, req: req]
  end

  test "simulator starts successfully", %{sim: sim, req: req} do
    response = Req.get!(req, url: "/hello")

    assert response.body =~ "It works!"
    assert response.status == 200

    <%= inspect @simulator.alias %>.set_greeting(sim, "Hello world")

    response = Req.get!(req, url: "/hello")

    assert response.body =~ "Hello world"
    assert response.status == 200
  end

  test "allows for closing and reopening a connection", %{sim: sim, req: req} do
    <%= inspect @simulator.alias %>.down(sim)

    assert {:error, %Req.TransportError{reason: :econnrefused}} =
             Req.request(req, url: "/hello", method: :get)

    <%= inspect @simulator.alias %>.up(sim)

    assert Req.get!(req, url: "/hello").status == 200
  end

<%= if @simulator.options.response_stubs? do %>
  test "triggering and clearing stubbed responses on specific endpoints", %{sim: sim, req: req} do
    <%= inspect @simulator.alias %>.trigger_internal_server_errors(sim, :greeting)

    response = Req.get!(req, url: "/hello")
    assert response.status == 500
    assert response.body =~ "Internal Server Error"

    <%= inspect @simulator.alias %>.clear_stubbed_responses(sim, :greeting)

    response = Req.get!(req, url: "/hello")
    assert response.status == 200
    assert response.body =~ "It works!"

    <%= inspect @simulator.alias %>.trigger_internal_server_errors(sim, :all)

    response = Req.get!(req, url: "/hello")
    assert response.status == 500
    assert response.body =~ "Internal Server Error"
  end
<% end %>
end
